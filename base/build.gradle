apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

repositories {
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = 1.11
def packageName = "base"

dependencies {
    api fileTree(
        dir: 'lib',
        include: [
            '*.jar'
        ]
    )
    
	//	ADempiere Core
	api "${baseGroupId}:${packageName}:${baseVersion}"
	// https://mvnrepository.com/artifact/org.apache.poi/poi
	api 'org.apache.poi:poi:3.17'
	// https://mvnrepository.com/artifact/commons-validator/commons-validator
	api 'commons-validator:commons-validator:1.7'
	api 'io.vavr:vavr:0.10.4'
	api 'net.sourceforge.barbecue:barbecue:1.5-beta1'
	// https://mvnrepository.com/artifact/io.konik/harness
    api group: 'io.konik', name: 'harness', version: '1.0.0'
    api "${baseGroupId}:adempiere-grpc-utils:1.3.6"

	//	ADempiere Core
	api "${baseGroupId}:base:${baseVersion}"
	api "${baseGroupId}:point-of-sales:${baseVersion}"
	api "${baseGroupId}:store:${baseVersion}"
	api "${baseGroupId}:distribution:${baseVersion}"
	api "${baseGroupId}:freight:${baseVersion}"
	api "${baseGroupId}:store:${baseVersion}"
	api "${baseGroupId}:human-resource-and-payroll:${baseVersion}"
	api "${baseGroupId}:extend:${baseVersion}"
	api "${baseGroupId}:migration:${baseVersion}"
	api "${baseGroupId}:asset:${baseVersion}"
	api "${baseGroupId}:crm:${baseVersion}"
	api "${baseGroupId}:production:${baseVersion}"
	api "${baseGroupId}:project:${baseVersion}"
	api "${baseGroupId}:request:${baseVersion}"
	api "${baseGroupId}:adempiere.test:${baseVersion}"
	api "${baseGroupId}:cashflow:${baseVersion}"
	api "${baseGroupId}:manufacturing:${baseVersion}"
	api "${baseGroupId}:wms:${baseVersion}"
	api "${baseGroupId}:openid-authentication:${baseVersion}"
	api "${baseGroupId}:investment-and-loan:${baseVersion}"
	api "${baseGroupId}:time-and-attendance:${baseVersion}"
	api "${baseGroupId}:loan:${baseVersion}"
	api "${baseGroupId}:discord-notifier:${baseVersion}"
	api "${baseGroupId}:telegram-notifier:${baseVersion}"
	api "${baseGroupId}:tools:${baseVersion}"
	api "${baseGroupId}:jasperreports:${baseVersion}"
	//	Others
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
	api 'net.sf.jasperreports:jasperreports-fonts:6.21.0'

	// ADempiere External Libraries
	api 'com.github.jjYBdx4IL:ecs:1.4.2.1'
	api 'com.itextpdf:itextpdf:5.5.13.3' // used by org.adempiere.pdf.iText7Document
	api 'io.konik:konik:1.3.2' // used by org.adempiere.pdf.iText7Document
	api 'io.vavr:vavr:0.10.4' // used by org.compiere.util.DB
	api "org.codehaus.groovy:groovy-all:2.4.15"

	// ADempiere Projects with additional features
	// Dashboard Improvements
	api "${baseGroupId}:adempiere-dashboard-improvements:1.0.8"
	// Point Of Sales Improvements
	api "${baseGroupId}:adempiere-pos-improvements:1.0.2"
	// Business Processors (To Task's and Schedulers)
	api "${baseGroupId}:adempiere-business-processors:1.1.0"
	// Engine as Queue
	api "${baseGroupId}:adempiere-kafka-connector:1.1.6"
	// Third part access using JWT
	api "${baseGroupId}:adempiere-jwt-token:1.0.2"
	// https://mvnrepository.com/artifact/com.nimbusds/oauth2-oidc-sdk
	api 'com.nimbusds:oauth2-oidc-sdk:9.35'
	// https://mvnrepository.com/artifact/com.nimbusds/nimbus-jose-jwt
	api 'com.nimbusds:nimbus-jose-jwt:9.22'
	// https://mvnrepository.com/artifact/com.nimbusds/content-type
	api 'com.nimbusds:content-type:2.2'
	// https://mvnrepository.com/artifact/net.minidev/json-smart
	api 'net.minidev:json-smart:2.4.8'
	// https://mvnrepository.com/artifact/net.minidev/accessors-smart
	api 'net.minidev:accessors-smart:2.4.8'
	//	Temporary projects
	//	Keycloak and Okta connector (Open-ID based)
	api "${baseGroupId}:adempiere-open-id-connector:1.0.0"
	
}


sourceSets {
    main {
         java {
            srcDirs = ['src/main/java/']
         }
    }
}

jar {
	manifest {
		attributes(
			"api-Title": "ADempiere Patch ${packageName}",
			"api-Version": patchVersion
		)
    }
}

configurations {
   all*.exclude group: 'xml-apis'
}

publishing {
    repositories {
		mavenLocal()

        maven {
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("sonatypeUsername")
                password = findProperty("sonatypePassword")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
			groupId = publishGroupId
			artifactId = 'adempiere-customizations.' + packageName
			version = patchVersion
           	from components.java
           	pom {
                name = 'Adempiere Patch ${packageName}'
                description = 'Project for Patches ${packageName}'
                url = 'http://adempiere.io/'
                licenses {
                    license {
                        name = 'GNU General Public License, version 2'
                        url = 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yamelsenih'
                        name = 'Yamel Senih'
                        email = 'ysenih@erpya.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/adempiere/adempiere-payroll-multi-engine.git'
                    developerConnection = 'scm:git:ssh://github.com/adempiere/adempiere-payroll-multi-engine.git'
                    url = 'http://github.com/adempiere/adempiere-payroll-multi-engine'
                }
            }
		}
	}
}

task cleanBuildPublishLocal(type: GradleBuild) {
	tasks = ['clean', 'build', 'publishToMavenLocal']
}


signing {
	def isReleaseVersion = !version.toString().startsWith("local") && !version.toString().endsWith("-SNAPSHOT")

	sign configurations.archives

	setRequired {
		// signing is required if this is a release version and the artifacts are to be published
		// do not use hasTask() as this require realization of the tasks that maybe are not necessary
		(isReleaseVersion || version.toString().equals("build")) && gradle.taskGraph.allTasks.any {
			it.equals(PublishToMavenRepository)
		}
	}
	def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}